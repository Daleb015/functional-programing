Collectors
- Collectors let us to decrease time collecting something
- There are collectors for list, set, or any type of collections
- Collect is a terminal operation
- Collectors provide ready made reduce algorithms
- There are summarize and aggregate operations with collectors

we can transform stream to collection with collector, some of that collections are:
    list
    set
    queue
    three set
    Map

An important characteristic is we can divide into two collectors a stream based on a condition true or false.
Also we can divide a stream in others stream based on a specific condition
we can chain collector as an argument of other grouping operation on collectors, this is also known as downstream
We can chain downstream collectors to perform complex operations

Collectors has operations
    Joining
    summing
    mapping
    grouping
    partitioning
    averaging
    counting
    maxby
    minby
    reducing

How collectors work
    Collector is an interface with 5 abstract methods : supplier - accumulator - combiner - finisher - characteristics
    At lease characteristics all the other methods are high order functions, so they returns supplier, biconsumer, binaryoperator, function.
    But we dont need to implement that interfaces, all of that are implement in the utility class Collectors

Collectors has a static nested class CollectorsImpl
CollectorsImpl has many static methods to use the Collectors interface, but we can implement by ourselves.
Collectors has a lot of implementations that are useful
