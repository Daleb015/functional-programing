Stream pipelines

- Streams are not data containers, they provided operations over elements but cannot be used to contain objects.
- Stream are compose by a source, zero or more intermediate operations and a terminal operation.

- Source: Which we generate the stream such as collection. (Array, generation function or io channel).
- Intermediate operations: These are operations that are applied on a stream and they return another stream.
- Terminal Operation: Produces a result or side effect from stream, (Side effect is anything other than returning
the result, such as print statement)

- A chain of operations over a stream are called a stream pipeline, an is composed by three things:
    Source
    Zero or more intermediate operations
    A terminal Operations

What streams are not
- Streams are not data containers
- Streams are immutable
- We can use streams only once

Streams are lazy
- All intermediate operations in streams are lazy.
- Lazy means that if we have only intermediate operations on a pipeline, they are going to execute only when we call the final operations, not earlier.
- This means that terminal operations are eager, and itÂ´s execute the entire pipeline when are called.

Numeric Streams
- Let us to improve some specific operations on a stream
- operations like average are only admitted with numeric streams like IntStream or LongStream
- We can convert a stream to a numeric stream with methods like mapToDouble
    IntStream mapToInt()
    DoubleStream mapToDouble()
    LongStream mapToLong()

- the numeric streams Are develop to avoid cost of unboxing

FlatMap Operation
- There are some cases when we have more than one stream, and we want to operate all the elements inside these streams like just one stream
- For this we can use the Stream.of(streamA,streamB), but this is a Stream of streams
- To avoid the problem we can flatten the streams, this means to get each element inside the streams and put inside a new stream





